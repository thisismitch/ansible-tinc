---

- name: install tinc
  package: name=tinc state=latest

- name: create tinc unit file (netname)
  template: >
    src=templates/tinc.service.j2
    dest=/etc/systemd/system/tinc.service
    owner=root
    group=root
    mode=0644

  notify: ["reload systemctl"]
  when: ansible_service_mgr == "systemd"

- name: create tinc unit file (generic)
  template: >
    src=templates/tinc@.service.j2
    dest=/etc/systemd/system/tinc@.service
    owner=root
    group=root
    mode=0644

  notify: ["reload systemctl"]
  when: ansible_service_mgr == "systemd"

- name: run handlers
  meta: flush_handlers

- name: ensure tinc netname directory exists
  file: >
    path=/etc/tinc/{{ netname }}/hosts
    owner=root
    group=root
    mode="u=rwX,g=rX,o=rX"
    recurse=yes
    state=directory

- name: create /etc/tinc/nets.boot file from template
  template: >
    src=nets.boot.j2
    dest=/etc/tinc/nets.boot
    owner=root
    group=root
    mode=0644

  notify: ["restart tinc"]

- name: ensure tinc.conf contains connection to all other nodes
  template: >
    src=templates/tinc.conf.j2
    dest=/etc/tinc/{{ netname }}/tinc.conf
    owner=root
    group=root
    mode=0644

  notify: ["reload tinc"]

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ netname }}/tinc-up
    owner=root
    group=root
    mode=0755

  notify: ["restart tinc"]

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ netname }}/tinc-down
    owner=root
    group=root
    mode=0755

  notify: ["restart tinc"]

- name: generate rsa keys
  expect:
    command: "/usr/sbin/tincd -n {{ netname }} --generate-keys={{ tinc_rsa_bit_length }}"
    responses:
      private: /etc/tinc/{{ netname }}/rsa_key.priv
      public: /etc/tinc/{{ netname }}/rsa_key.pub
    creates: /etc/tinc/{{ netname }}/rsa_key.priv

- name: get public key
  command: cat /etc/tinc/{{ netname }}/rsa_key.pub

  register: tinc_rsa_public_key
  changed_when: false
  failed_when: "'-----BEGIN RSA PUBLIC KEY-----' not in tinc_rsa_public_key.stdout"

- name: configure host file
  template: >
    src=templates/host.j2
    dest=/etc/tinc/{{ netname }}/hosts/{{ ansible_hostname }}
    owner=root
    group=root
    mode=0644

  notify: ["restart tinc"]
  failed_when: "'-----BEGIN OLD PUBLIC KEY-----' in tinc_rsa_public_key.stdout"

- name: fetch tinc hosts file after key creation
  fetch: >
    src=/etc/tinc/{{ netname }}/hosts/{{ ansible_hostname }}
    dest=fetch/{{ ansible_hostname }}
    flat=yes
    fail_on_missing=yes

- name: sync the fetched tinc hosts files on each host
  synchronize: >
    src=fetch/
    dest=/etc/tinc/{{ netname }}/hosts/

  notify: ["reload tinc"]

- name: ensure tinc is started
  service: >
    name=tinc
    enabled=yes
    state=started

- name: add entries to /etc/hosts for (server) peers
  lineinfile: >
    dest=/etc/hosts
    regexp='.*{{ item }}$'
    line="{{ hostvars[item].vpn_ip }} {{item}}"
    state=present

  with_items: "{{ play_hosts }}"
  when: hostvars[item].vpn_ip is defined
